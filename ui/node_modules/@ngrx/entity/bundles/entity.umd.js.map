{"version":3,"file":"entity.umd.js","sources":["../../../modules/entity/src/create_adapter.ts","../../../modules/entity/src/sorted_state_adapter.ts","../../../modules/entity/src/unsorted_state_adapter.ts","../../../modules/entity/src/state_adapter.ts","../../../modules/entity/src/state_selectors.ts","../../../modules/entity/src/entity_state.ts"],"sourcesContent":["import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options,\n  };\n\n  const /** @type {?} */ stateFactory = createInitialStateFactory<T>();\n  const /** @type {?} */ selectorsFactory = createSelectorsFactory<T>();\n  const /** @type {?} */ stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  Dictionary,\n  EntityStateAdapter,\n  Update,\n} from './models';\nimport { createStateOperator } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T>;\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nexport function createSortedStateAdapter<T>(selectId: any, sort: any): any {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n\n  function addOneMutably(entity: T, state: R): boolean;\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: any, state: any): boolean {\n    return addManyMutably([entity], state);\n  }\n\n  function addManyMutably(newModels: T[], state: R): boolean;\n/**\n * @param {?} newModels\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(newModels: any[], state: any): boolean {\n    const /** @type {?} */ models = newModels.filter(\n      model => !(selectId(model) in state.entities)\n    );\n\n    return merge(models, state);\n  }\n\n  function addAllMutably(models: T[], state: R): boolean;\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(models: any[], state: any): boolean {\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(models, state);\n\n    return true;\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): boolean;\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: any, state: any): boolean {\n    return updateManyMutably([update], state);\n  }\n\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): void;\n/**\n * @param {?} models\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction takeUpdatedModel(models: any[], update: any, state: any): void {\n    if (!(update.id in state.entities)) {\n      return;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated = Object.assign({}, original, update.changes);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): boolean;\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: any[], state: any): boolean {\n    const /** @type {?} */ models: T[] = [];\n\n    updates.forEach(update => takeUpdatedModel(models, update, state));\n\n    if (models.length) {\n      state.ids = state.ids.filter((id: any) => id in state.entities);\n    }\n\n    return merge(models, state);\n  }\n\n  function merge(models: T[], state: R): boolean;\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction merge(models: any[], state: any): boolean {\n    if (models.length === 0) {\n      return false;\n    }\n\n    models.sort(sort);\n\n    const /** @type {?} */ ids: any[] = [];\n\n    let /** @type {?} */ i = 0;\n    let /** @type {?} */ j = 0;\n\n    while (i < models.length && j < state.ids.length) {\n      const /** @type {?} */ model = models[i];\n      const /** @type {?} */ modelId = selectId(model);\n      const /** @type {?} */ entityId = state.ids[j];\n      const /** @type {?} */ entity = state.entities[entityId];\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n\n    return true;\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    addAll: createStateOperator(addAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter, IdSelector, Update } from './models';\nimport { createStateOperator } from './state_adapter';\n\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T>;\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nexport function createUnsortedStateAdapter<T>(selectId: IdSelector<T>): any {\n  type R = EntityState<T>;\n\n  function addOneMutably(entity: T, state: R): boolean;\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: any, state: any): boolean {\n    const /** @type {?} */ key = selectId(entity);\n\n    if (key in state.entities) {\n      return false;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return true;\n  }\n\n  function addManyMutably(entities: T[], state: R): boolean;\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(entities: any[], state: any): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in entities) {\n      didMutate = addOneMutably(entities[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n\n  function addAllMutably(entities: T[], state: R): boolean;\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(entities: any[], state: any): boolean {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return true;\n  }\n\n  function removeOneMutably(key: T, state: R): boolean;\n/**\n * @param {?} key\n * @param {?} state\n * @return {?}\n */\nfunction removeOneMutably(key: any, state: any): boolean {\n    return removeManyMutably([key], state);\n  }\n\n  function removeManyMutably(keys: T[], state: R): boolean;\n/**\n * @param {?} keys\n * @param {?} state\n * @return {?}\n */\nfunction removeManyMutably(keys: any[], state: any): boolean {\n    const /** @type {?} */ didMutate =\n      keys\n        .filter(key => key in state.entities)\n        .map(key => delete state.entities[key]).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.filter((id: any) => id in state.entities);\n    }\n\n    return didMutate;\n  }\n\n  function removeAll<S extends R>(state: S): S;\n/**\n * @template S\n * @param {?} state\n * @return {?}\n */\nfunction removeAll<S extends R>(state: any): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n\n  function takeNewKey(\n    keys: { [id: string]: string },\n    update: Update<T>,\n    state: R\n  ): void;\n/**\n * @param {?} keys\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction takeNewKey(\n    keys: { [id: string]: any },\n    update: Update<T>,\n    state: any\n  ): void {\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ newKey = selectId(updated);\n\n    if (newKey !== update.id) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): boolean;\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: any, state: any): boolean {\n    return updateManyMutably([update], state);\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): boolean;\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: any[], state: any): boolean {\n    const /** @type {?} */ newKeys: { [id: string]: string } = {};\n\n    const /** @type {?} */ didMutate =\n      updates\n        .filter(update => update.id in state.entities)\n        .map(update => takeNewKey(newKeys, update, state)).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.map((id: any) => newKeys[id] || id);\n    }\n\n    return didMutate;\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(addAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter } from './models';\n\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => boolean\n): EntityState<V>;\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nexport function createStateOperator<V, R>(\n  mutator: (arg: any, state: any) => boolean\n): any {\n  return function operation<S extends EntityState<V>>(arg: R, state: any): S {\n    const /** @type {?} */ clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const /** @type {?} */ didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    return state;\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors, Dictionary } from './models';\n/**\n * @template T\n * @return {?}\n */\nexport function createSelectorsFactory<T>() {\n  function getSelectors(): EntitySelectors<T, EntityState<T>>;\n  function getSelectors<V>(\n    selectState: (state: V) => EntityState<T>\n  ): EntitySelectors<T, V>;\n/**\n * @param {?=} selectState\n * @return {?}\n */\nfunction getSelectors(\n    selectState?: (state: any) => EntityState<T>\n  ): EntitySelectors<T, any> {\n    const /** @type {?} */ selectIds = (state: any) => state.ids;\n    const /** @type {?} */ selectEntities = (state: EntityState<T>) => state.entities;\n    const /** @type {?} */ selectAll = createSelector(\n      selectIds,\n      selectEntities,\n      (ids: T[], entities: Dictionary<T>): any =>\n        ids.map((id: any) => ( /** @type {?} */((entities as any)))[id])\n    );\n\n    const /** @type {?} */ selectTotal = createSelector(selectIds, ids => ids.length);\n\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n      };\n    }\n\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: createSelector(selectState, selectEntities),\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n    };\n  }\n\n  return { getSelectors };\n}\n","import { EntityState } from './models';\n/**\n * @template V\n * @return {?}\n */\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n/**\n * @template V\n * @return {?}\n */\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n/**\n * @param {?=} additionalState\n * @return {?}\n */\nfunction getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n"],"names":["createSelector"],"mappings":"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"}