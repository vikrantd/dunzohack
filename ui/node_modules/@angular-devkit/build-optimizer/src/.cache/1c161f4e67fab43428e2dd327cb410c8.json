{"remainingRequest":"/Users/Ayush.Nair/Documents/naira/dunzohack/ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/Ayush.Nair/Documents/naira/dunzohack/ui/node_modules/@ngrx/router-store/@ngrx/router-store.es5.js","dependencies":[{"path":"/Users/Ayush.Nair/Documents/naira/dunzohack/ui/node_modules/@ngrx/router-store/@ngrx/router-store.es5.js","mtime":1510095324000},{"path":"/Users/Ayush.Nair/Documents/naira/dunzohack/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Ayush.Nair/Documents/naira/dunzohack/ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Inject, InjectionToken, NgModule } from '@angular/core';\nimport { NavigationCancel, NavigationError, Router, RoutesRecognized } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { of as of$1 } from 'rxjs/observable/of';\n/**\n * @abstract\n */\nvar RouterStateSerializer = /*@__PURE__*/ (function () {\n    function RouterStateSerializer() {\n    }\n    /**\n     * @abstract\n     * @param {?} routerState\n     * @return {?}\n     */\n    RouterStateSerializer.prototype.serialize = function (routerState) { };\n    return RouterStateSerializer;\n}());\nvar DefaultRouterStateSerializer = /*@__PURE__*/ (function () {\n    function DefaultRouterStateSerializer() {\n    }\n    /**\n     * @param {?} routerState\n     * @return {?}\n     */\n    DefaultRouterStateSerializer.prototype.serialize = function (routerState) {\n        return routerState;\n    };\n    return DefaultRouterStateSerializer;\n}());\n/**\n * An action dispatched when the router navigates.\n */\nvar ROUTER_NAVIGATION = 'ROUTER_NAVIGATION';\n/**\n * An action dispatched when the router cancels navigation.\n */\nvar ROUTER_CANCEL = 'ROUTER_CANCEL';\n/**\n * An action dispatched when the router errors.\n */\nvar ROUTER_ERROR = 'ROUTE_ERROR';\n/**\n * @template T\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\nfunction routerReducer(state, action) {\n    switch (action.type) {\n        case ROUTER_NAVIGATION:\n        case ROUTER_ERROR:\n        case ROUTER_CANCEL:\n            return {\n                state: action.payload.routerState,\n                navigationId: action.payload.event.id,\n            };\n        default:\n            return state;\n    }\n}\nvar _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\nvar ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nvar DEFAULT_ROUTER_FEATURENAME = 'routerReducer';\n/**\n * @param {?} config\n * @return {?}\n */\nfunction _createDefaultRouterConfig(config) {\n    var /** @type {?} */ _config = {};\n    if (typeof config === 'function') {\n        _config = config();\n    }\n    return Object.assign({ stateKey: DEFAULT_ROUTER_FEATURENAME }, _config);\n}\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: RouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * \\@NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nvar StoreRouterConnectingModule = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} store\n     * @param {?} router\n     * @param {?} serializer\n     * @param {?} config\n     */\n    function StoreRouterConnectingModule(store$$1, router$$1, serializer, config) {\n        this.store = store$$1;\n        this.router = router$$1;\n        this.serializer = serializer;\n        this.config = config;\n        this.dispatchTriggeredByRouter = false;\n        this.navigationTriggeredByDispatch = false;\n        this.stateKey = this.config.stateKey;\n        this.setUpBeforePreactivationHook();\n        this.setUpStoreStateListener();\n        this.setUpStateRollbackEvents();\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    StoreRouterConnectingModule.forRoot = function (config) {\n        if (config === void 0) {\n            config = {};\n        }\n        return {\n            ngModule: StoreRouterConnectingModule,\n            providers: [\n                { provide: _ROUTER_CONFIG, useValue: config },\n                {\n                    provide: ROUTER_CONFIG,\n                    useFactory: _createDefaultRouterConfig,\n                    deps: [_ROUTER_CONFIG],\n                },\n            ],\n        };\n    };\n    /**\n     * @return {?}\n     */\n    StoreRouterConnectingModule.prototype.setUpBeforePreactivationHook = function () {\n        var _this = this;\n        ((this.router)).hooks.beforePreactivation = function (routerState) {\n            _this.routerState = _this.serializer.serialize(routerState);\n            if (_this.shouldDispatchRouterNavigation())\n                _this.dispatchRouterNavigation();\n            return of$1(true);\n        };\n    };\n    /**\n     * @return {?}\n     */\n    StoreRouterConnectingModule.prototype.setUpStoreStateListener = function () {\n        var _this = this;\n        this.store.subscribe(function (s) {\n            _this.storeState = s;\n        });\n        this.store.select(this.stateKey).subscribe(function () {\n            _this.navigateIfNeeded();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    StoreRouterConnectingModule.prototype.shouldDispatchRouterNavigation = function () {\n        if (!this.storeState[this.stateKey])\n            return true;\n        return !this.navigationTriggeredByDispatch;\n    };\n    /**\n     * @return {?}\n     */\n    StoreRouterConnectingModule.prototype.navigateIfNeeded = function () {\n        if (!this.storeState[this.stateKey] ||\n            !this.storeState[this.stateKey].state) {\n            return;\n        }\n        if (this.dispatchTriggeredByRouter)\n            return;\n        if (this.router.url !== this.storeState[this.stateKey].state.url) {\n            this.navigationTriggeredByDispatch = true;\n            this.router.navigateByUrl(this.storeState[this.stateKey].state.url);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    StoreRouterConnectingModule.prototype.setUpStateRollbackEvents = function () {\n        var _this = this;\n        this.router.events.subscribe(function (e) {\n            if (e instanceof RoutesRecognized) {\n                _this.lastRoutesRecognized = e;\n            }\n            else if (e instanceof NavigationCancel) {\n                _this.dispatchRouterCancel(e);\n            }\n            else if (e instanceof NavigationError) {\n                _this.dispatchRouterError(e);\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    StoreRouterConnectingModule.prototype.dispatchRouterNavigation = function () {\n        this.dispatchRouterAction(ROUTER_NAVIGATION, {\n            routerState: this.routerState,\n            event: new RoutesRecognized(this.lastRoutesRecognized.id, this.lastRoutesRecognized.url, this.lastRoutesRecognized.urlAfterRedirects, this.routerState),\n        });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    StoreRouterConnectingModule.prototype.dispatchRouterCancel = function (event) {\n        this.dispatchRouterAction(ROUTER_CANCEL, {\n            routerState: this.routerState,\n            storeState: this.storeState,\n            event: event,\n        });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    StoreRouterConnectingModule.prototype.dispatchRouterError = function (event) {\n        this.dispatchRouterAction(ROUTER_ERROR, {\n            routerState: this.routerState,\n            storeState: this.storeState,\n            event: new NavigationError(event.id, event.url, \"\" + event),\n        });\n    };\n    /**\n     * @param {?} type\n     * @param {?} payload\n     * @return {?}\n     */\n    StoreRouterConnectingModule.prototype.dispatchRouterAction = function (type, payload) {\n        this.dispatchTriggeredByRouter = true;\n        try {\n            this.store.dispatch({ type: type, payload: payload });\n        }\n        finally {\n            this.dispatchTriggeredByRouter = false;\n            this.navigationTriggeredByDispatch = false;\n        }\n    };\n    return StoreRouterConnectingModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { ROUTER_ERROR, ROUTER_CANCEL, ROUTER_NAVIGATION, routerReducer, StoreRouterConnectingModule, ROUTER_CONFIG, DEFAULT_ROUTER_FEATURENAME, RouterStateSerializer, DefaultRouterStateSerializer, _ROUTER_CONFIG as ɵa, _createDefaultRouterConfig as ɵb };\n//# sourceMappingURL=router-store.es5.js.map\n",null]}